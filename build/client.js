// Generated by CoffeeScript 1.3.3
var Client, Shred;

Shred = require("shred");

Client = (function() {

  function Client(service_url, options) {
    var resource_type, schema, _ref;
    this.service_url = service_url;
    this.shred = new Shred();
    this.schemas = options.schema;
    this["interface"] = options["interface"];
    this.wrappers = {};
    _ref = this.schemas;
    for (resource_type in _ref) {
      schema = _ref[resource_type];
      if (schema.type === "resource") {
        this.wrappers[resource_type] = this.resource_wrapper(resource_type, schema);
      } else if (schema.type === "dictionary") {
        this.wrappers[resource_type] = this.dictionary_wrapper(resource_type, schema);
      } else if (schema.type === "array") {
        this.wrappers[resource_type] = this.array_wrapper(schema);
      } else if (schema.type === "object") {
        this.wrappers[resource_type] = this.object_wrapper(schema);
      }
    }
  }

  Client.prototype.array_wrapper = function(schema) {
    var item_type, rigger;
    rigger = this;
    item_type = schema.items.type;
    return function(items) {
      var result, value, _i, _len;
      result = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        value = items[_i];
        result.push(rigger.wrap(item_type, value));
      }
      return result;
    };
  };

  Client.prototype.object_wrapper = function(schema) {
    var rigger;
    rigger = this;
    return function(data) {
      var name, prop_def, raw, type, wrapped, _ref;
      _ref = schema.properties;
      for (name in _ref) {
        prop_def = _ref[name];
        raw = data[name];
        type = prop_def.type;
        wrapped = rigger.wrap(type, raw);
        data[name] = wrapped;
      }
      return data;
    };
  };

  Client.prototype.dictionary_wrapper = function(resource_type, schema) {
    var constructor, item_type, rigger;
    rigger = this;
    item_type = schema.items.type;
    constructor = function(items) {
      var name, raw, value;
      for (name in items) {
        value = items[name];
        raw = items[name];
        this[name] = rigger.wrap(item_type, raw);
      }
      return null;
    };
    constructor.resource_type = resource_type;
    return function(data) {
      return new constructor(data);
    };
  };

  Client.prototype.resource_wrapper = function(resource_type, schema) {
    var constructor, interface_def, rigger;
    rigger = this;
    constructor = this.resource_constructor();
    constructor.resource_type = resource_type;
    if (interface_def = this["interface"][resource_type]) {
      this.define_interface(constructor, interface_def.actions);
    } else {
      console.log("WARNING: No interface defined for resource type: " + resource_type + ".");
    }
    this.define_properties(constructor, schema.properties);
    return function(data) {
      return new constructor(data);
    };
  };

  Client.prototype.define_interface = function(constructor, actions) {
    var definition, method, name, _ref, _results;
    constructor.prototype.requests = {};
    _ref = this.resource_prototype;
    for (name in _ref) {
      method = _ref[name];
      constructor.prototype[name] = method;
    }
    _results = [];
    for (name in actions) {
      definition = actions[name];
      constructor.prototype.requests[name] = this.request_creator(name, definition);
      _results.push(constructor.prototype[name] = this.register_action(name));
    }
    return _results;
  };

  Client.prototype.define_properties = function(constructor, properties) {
    var name, rigger, schema, spec, _results;
    rigger = this;
    _results = [];
    for (name in properties) {
      schema = properties[name];
      spec = this.property_spec(name, schema);
      _results.push(Object.defineProperty(constructor.prototype, name, spec));
    }
    return _results;
  };

  Client.prototype.property_spec = function(name, property_schema) {
    var rigger, spec, wrap_function;
    rigger = this;
    wrap_function = this.create_wrapping_function(property_schema);
    spec = {};
    spec.get = function() {
      var val;
      val = this.properties[name];
      return wrap_function(val);
    };
    if (!property_schema.readonly) {
      spec.set = function(val) {
        return this.properties[name] = val;
      };
    }
    return spec;
  };

  Client.prototype.resource_constructor = function() {
    var rigger;
    rigger = this;
    return function(properties) {
      Object.defineProperty(this, "rigger", {
        value: rigger,
        enumerable: false
      });
      this.properties = properties;
      return null;
    };
  };

  Client.prototype.resource_prototype = {
    prepare_request: function(name, options) {
      var prepper;
      prepper = this.requests[name];
      if (prepper) {
        return prepper.call(this, name, options);
      } else {
        throw "No such action defined: " + name;
      }
    },
    request: function(name, options) {
      var request;
      request = this.prepare_request(name, options);
      return this.rigger.shred.request(request);
    },
    credential: function(type, action) {
      var cap;
      if (type === "Capability") {
        return cap = this.properties.capabilities[action];
      }
    }
  };

  Client.prototype.register_action = function(name) {
    return function(data) {
      return this.request(name, data);
    };
  };

  Client.prototype.request_creator = function(name, definition) {
    var authorization, default_headers, method, query, request_media_type, request_type, required_params, response_media_type, response_type, rigger;
    rigger = this;
    method = definition.method;
    default_headers = {};
    if (request_type = definition.request_entity) {
      request_media_type = rigger.schemas[request_type].media_type;
      default_headers["Content-Type"] = request_media_type;
    }
    if (response_type = definition.response_entity) {
      response_media_type = rigger.schemas[response_type].media_type;
      default_headers["Accept"] = response_media_type;
    }
    authorization = definition.authorization;
    if (query = definition.query) {
      required_params = query.required;
    }
    return function(name, options) {
      var credential, error, handler, key, request, response, status, value, _ref, _ref1;
      request = {
        url: this.url,
        method: method,
        headers: {},
        content: options.content
      };
      for (key in default_headers) {
        value = default_headers[key];
        request.headers[key] = value;
      }
      if (authorization) {
        credential = this.credential(authorization, name);
        request.headers["Authorization"] = "" + authorization + " " + credential;
      }
      _ref = options.headers;
      for (name in _ref) {
        value = _ref[name];
        request.headers[name] = value;
      }
      if (options.query) {
        request.query = options.query;
      }
      for (key in required_params) {
        value = required_params[key];
        if (!request.query[key]) {
          throw "Missing required query param: " + key;
        }
      }
      request.on = {};
      if (error = options.on.error) {
        request.on.error = error;
        delete options.on.error;
      }
      if (response = options.on.response) {
        request.on.response = response;
        delete options.on.response;
      }
      _ref1 = options.on;
      for (status in _ref1) {
        handler = _ref1[status];
        request.on[status] = function(response) {
          var wrapped;
          wrapped = rigger.wrap(response_type, response.content.data);
          return handler(response, wrapped);
        };
      }
      return request;
    };
  };

  Client.prototype.create_wrapping_function = function(schema) {
    var rigger;
    rigger = this;
    if (schema.type === "object") {
      return this.object_wrapper(schema);
    } else if (schema.type === "array") {
      return this.array_wrapper(schema);
    } else if (this.wrappers[schema.type]) {
      return function(data) {
        return rigger.wrap(schema.type, data);
      };
    } else {
      return function(data) {
        return data;
      };
    }
  };

  Client.prototype.wrap = function(type, data) {
    var wrapper;
    if (wrapper = this.wrappers[type]) {
      return wrapper(data);
    } else {
      return data;
    }
  };

  return Client;

})();

module.exports = Client;
