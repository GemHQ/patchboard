// Generated by CoffeeScript 1.3.3
var Path,
  __slice = [].slice;

Path = (function() {

  function Path(path_string) {
    this.spec = this.path_spec(path_string);
    this.generate = this.path_generator(this.spec);
  }

  Path.prototype.tokenize_path = function(string) {
    var tokens;
    return tokens = string.slice(1).split("/");
  };

  Path.prototype.path_spec = function(path_string) {
    var index, name, spec, token, tokens, _i, _len;
    spec = {
      components: [],
      fields: {}
    };
    tokens = this.tokenize_path(path_string);
    for (index = _i = 0, _len = tokens.length; _i < _len; index = ++_i) {
      token = tokens[index];
      if (token.indexOf(":") === 0) {
        name = token.slice(1);
        spec.fields[name] = index;
        spec.components.push(null);
      } else {
        spec.components.push(token);
      }
    }
    return spec;
  };

  Path.prototype.path_generator = function(spec) {
    var expected_arity, expected_keys, service;
    service = this;
    expected_keys = Object.keys(spec.fields).sort().join(",");
    expected_arity = Object.keys(spec.fields).length;
    return function() {
      var args, index, input_keys, name, options, out, value, _i, _len, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      out = spec.components.slice(0);
      if (args.length === 1 && args[0].constructor === Object) {
        options = args[0];
        input_keys = Object.keys(options).sort().join(",");
        if (input_keys !== expected_keys) {
          console.log(expected_keys, input_keys);
          throw "Input properties not suitable to generate URL";
        }
        _ref = spec.fields;
        for (name in _ref) {
          index = _ref[name];
          value = options[name];
          out[index] = value;
        }
      } else if (args.length === expected_arity) {
        for (index = _i = 0, _len = out.length; _i < _len; index = ++_i) {
          value = out[index];
          if (value === null) {
            out[index] = args.shift();
          }
        }
      } else {
        throw "Wrong number of arguments for URL generation";
      }
      return "/" + (out.join("/"));
    };
  };

  return Path;

})();

module.exports = Path;
