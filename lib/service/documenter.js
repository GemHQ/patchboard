// Generated by CoffeeScript 1.3.3
var Documenter, marked;

marked = require("marked");

marked.setOptions({
  gfm: true,
  pedantic: false
});

Documenter = (function() {

  function Documenter(schema, _interface) {
    this["interface"] = _interface;
    this.schema_id = schema.id;
    this.schemas = schema.properties;
  }

  Documenter.prototype.document_schema = function() {
    var name, out, schema, _ref;
    out = [];
    out.push("# Schemas");
    _ref = this.schemas;
    for (name in _ref) {
      schema = _ref[name];
      out.push(this.schema_doc(name, schema));
    }
    return out.join("\n\n");
  };

  Documenter.prototype.schema_doc = function(name, schema) {
    var lines;
    lines = [];
    lines.push("<a id=\"" + this.schema_id + "/" + name + "\"></a>\n## " + name + " ");
    lines.push("```json\n" + (JSON.stringify(schema, null, 2)) + "\n```");
    return lines.join("\n\n");
  };

  Documenter.prototype.document_interface = function() {
    var definition, name, out, _ref;
    out = [];
    out.push("# Interface");
    _ref = this["interface"];
    for (name in _ref) {
      definition = _ref[name];
      out.push(this.resource_doc(name, definition));
    }
    return out.join("\n\n");
  };

  Documenter.prototype.resource_doc = function(name, definition) {
    var action_def, action_name, lines, _ref;
    lines = [];
    lines.push("## " + name);
    if (definition.description) {
      lines.push(definition.description);
    }
    _ref = definition.actions;
    for (action_name in _ref) {
      action_def = _ref[action_name];
      lines.push(this.action_doc(action_name, action_def));
    }
    return lines.join("\n\n");
  };

  Documenter.prototype.action_doc = function(name, definition) {
    var accept, content_type, headers, keys, lines, re, required, _ref;
    lines = [];
    lines.push("### Action: `" + name + "`");
    if (definition.description) {
      lines.push(definition.description);
    }
    lines.push("**HTTP Request**");
    lines.push("- **Method: `" + definition.method + "`**");
    if ((_ref = definition.query) != null ? _ref.required : void 0) {
      required = definition.query.required;
      keys = Object.keys(required);
      if (keys.length > 0) {
        lines.push("- **Required query parameters:** " + (keys.join(', ')));
      }
    }
    headers = [];
    if (definition.request_entity) {
      content_type = this.schemas[definition.request_entity].mediaType;
      headers.push("  - **Content-Type: `" + content_type + "`**");
      re = definition.request_entity;
    }
    if (definition.response_entity) {
      accept = this.schemas[definition.response_entity].mediaType;
      headers.push("  - **Accept: `" + accept + "`**");
    }
    if (definition.authorization) {
      headers.push("  - **Authorization: `" + definition.authorization + " <credential>`**");
    }
    if (headers.length > 0) {
      lines.push("- **Headers**");
      lines.push(headers.join("\n\n"));
      if (definition.request_entity) {
        lines.push("- **Body Schema**: [" + re + "](#" + this.schema_id + "/" + re + ")");
      }
    }
    lines.push("**HTTP Response**");
    if (definition.status) {
      lines.push("- **Expected Status**: " + definition.status);
    }
    if (definition.response_entity) {
      re = definition.response_entity;
      lines.push("- **Body Schema**: [" + re + "](#" + this.schema_id + "/" + re + ")");
    }
    return lines.join("\n\n");
  };

  return Documenter;

})();

module.exports = Documenter;
