// Generated by CoffeeScript 1.3.3
var Documenter, http, marked;

http = require("http");

marked = require("marked");

marked.setOptions({
  gfm: true,
  pedantic: false
});

Documenter = (function() {

  function Documenter(schemas, resources) {
    this.schemas = schemas;
    this.resources = resources;
  }

  Documenter.prototype.document_resources = function() {
    var definition, name, out, _ref;
    out = [];
    out.push("# Resources");
    _ref = this.resources;
    for (name in _ref) {
      definition = _ref[name];
      out.push(this.resource_doc(name, definition));
    }
    return out.join("\n\n");
  };

  Documenter.prototype.resource_doc = function(name, definition) {
    var action_def, action_name, lines, _ref;
    lines = [];
    lines.push("## " + name);
    if (definition.description) {
      lines.push(definition.description);
    }
    _ref = definition.actions;
    for (action_name in _ref) {
      action_def = _ref[action_name];
      lines.push(this.action_doc(action_name, action_def));
    }
    return lines.join("\n\n");
  };

  Documenter.prototype.action_doc = function(name, definition) {
    var accept, content_type, headers, keys, lines, re, required, status, _ref;
    lines = [];
    lines.push("### Action: `" + name + "`");
    if (definition.description) {
      lines.push(definition.description);
    }
    lines.push("**HTTP Request**");
    lines.push("- **Method: `" + definition.method + "`**");
    if ((_ref = definition.query) != null ? _ref.required : void 0) {
      required = definition.query.required;
      keys = Object.keys(required);
      if (keys.length > 0) {
        lines.push("- **Required query parameters:** " + (keys.join(', ')));
      }
    }
    headers = [];
    if (definition.request_entity) {
      content_type = this.schemas[definition.request_entity].mediaType;
      headers.push("  - **Content-Type: `" + content_type + "`**");
      re = definition.request_entity;
    }
    if (definition.response_entity) {
      accept = this.schemas[definition.response_entity].mediaType;
      headers.push("  - **Accept: `" + accept + "`**");
    }
    if (definition.authorization) {
      headers.push("  - **Authorization: `" + definition.authorization + " <credential>`**");
    }
    if (headers.length > 0) {
      lines.push("- **Headers**");
      lines.push(headers.join("\n\n"));
      if (definition.request_entity) {
        lines.push("- **Body Schema**: [" + re + "](#" + (this.schemas[re].id.replace("#", "/")) + ")");
      }
    }
    lines.push("**HTTP Response**");
    if (status = definition.status) {
      lines.push("- **Expected Status**: " + status + " - " + http.STATUS_CODES[status]);
    }
    if (definition.response_entity) {
      re = definition.response_entity;
      lines.push("- **Body Schema**: [" + re + "](#" + (this.schemas[re].id.replace("#", "/")) + ")");
    }
    return lines.join("\n\n");
  };

  return Documenter;

})();

module.exports = Documenter;
