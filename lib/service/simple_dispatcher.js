// Generated by CoffeeScript 1.3.3
var Classifier, Context, SimpleDispatcher, URL;

URL = require("url");

Classifier = require("./classifier");

Context = require("./context");

SimpleDispatcher = (function() {

  function SimpleDispatcher(service, handlers) {
    this.service = service;
    this.handlers = handlers;
    this.map = service.paths;
    this.supply_missing_handlers();
  }

  SimpleDispatcher.prototype.supply_missing_handlers = function() {
    var action, definition, handler, resource, spec, _ref, _results;
    handler = this.handlers.service["default"];
    _ref = this.service.resources;
    _results = [];
    for (resource in _ref) {
      definition = _ref[resource];
      _results.push((function() {
        var _base, _base1, _ref1, _results1;
        _ref1 = definition.actions;
        _results1 = [];
        for (action in _ref1) {
          spec = _ref1[action];
          (_base = this.handlers)[resource] || (_base[resource] = {});
          _results1.push((_base1 = this.handlers[resource])[action] || (_base1[action] = handler));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  SimpleDispatcher.prototype.create_handler = function() {
    var dispatcher;
    dispatcher = this;
    return function(request, response) {
      return dispatcher.dispatch(request, response);
    };
  };

  SimpleDispatcher.prototype.dispatch = function(request, response) {
    var context, handler, match, validation;
    this.service.augment_request(request);
    match = this.service.classify(request);
    if (match.error) {
      return this.classification_error(match.error, request, response);
    } else {
      if (match.content_type) {
        validation = this.validate(match.content_type, request);
        if (validation.errors.length > 0) {
          this.default_error_handler({
            status: 400,
            message: "Bad Request",
            description: validation.description
          }, response);
          return;
        }
      }
      handler = this.find_handler(match);
      context = new Context(request, response, match);
      return handler(context);
    }
  };

  SimpleDispatcher.prototype.validate = function(media_type, request) {
    return this.service.validate({
      media_type: media_type
    }, request.body);
  };

  SimpleDispatcher.prototype.find_handler = function(match) {
    var action, resource;
    if (resource = this.handlers[match.resource_type]) {
      if (action = resource[match.action_name]) {
        return action;
      } else {
        throw "Resource '" + match.resource_type + "' has no such action: " + match.action_name;
      }
    } else {
      throw "No such resource: " + match.resource_type;
    }
  };

  SimpleDispatcher.prototype.classification_error = function(error, request, response) {
    return this.default_error_handler(error, response);
  };

  SimpleDispatcher.prototype.default_error_handler = function(error, response) {
    response.writeHead(error.status, {
      "Content-Type": "application/json"
    });
    return response.end(JSON.stringify(error));
  };

  return SimpleDispatcher;

})();

module.exports = SimpleDispatcher;
