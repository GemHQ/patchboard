// Generated by CoffeeScript 1.3.3
var JSV, SchemaManager, patchboard_schema;

JSV = require("JSV").JSV;

patchboard_schema = require("../patchboard_schema");

SchemaManager = (function() {

  function SchemaManager(application_schema) {
    this.application_schema = application_schema;
    this.jsv = JSV.createEnvironment("json-schema-draft-03");
    this.register_schema(patchboard_schema);
    this.register_schema(this.application_schema);
  }

  SchemaManager.prototype.register_schema = function(schema) {
    return this.jsv.createSchema(schema, false, schema.id);
  };

  SchemaManager.prototype.validate = function(type, data) {
    var schema, schema_url;
    schema_url = "urn:" + this.application_schema.id + "#" + type;
    schema = this.jsv.findSchema(schema_url);
    if (schema) {
      return this.jsv.validate(data, schema, function(error) {
        return console.log(error);
      });
    } else {
      throw "unknown schema type: " + type;
    }
  };

  SchemaManager.transform_schemas = function(schemas) {
    var convert_types, extender, key, name, primitives, required, schema, trans, transformed, value, _i, _len;
    primitives = {
      "string": true,
      "object": true,
      "array": true,
      "boolean": true,
      "number": true
    };
    convert_types = function(thing) {
      var key, value, _results;
      _results = [];
      for (key in thing) {
        value = thing[key];
        if (value.type === "object" && value.properties) {
          _results.push(convert_types(value.properties));
        } else if (value.type && !primitives[value.type]) {
          _results.push(thing[key] = {
            $ref: "api#" + value.type
          });
        } else {

        }
      }
      return _results;
    };
    transformed = {};
    transformed.id = "api";
    transformed.properties = {};
    for (name in schemas) {
      schema = schemas[name];
      trans = {
        id: "#" + name
      };
      if (extender = schema["extends"]) {
        delete schema["extends"];
        if (extender.indexOf("patchboard#") === 0) {
          trans["extends"] = {
            $ref: extender
          };
        } else {
          trans["extends"] = {
            $ref: "api#" + extender
          };
        }
      }
      required = schema.required;
      delete schema.required;
      if (schema.media_type) {
        trans.mediaType = schema.media_type;
        delete schema.media_type;
      }
      if (schema.properties) {
        convert_types(schema.properties);
      }
      for (key in schema) {
        value = schema[key];
        trans[key] = value;
      }
      if (required) {
        for (_i = 0, _len = required.length; _i < _len; _i++) {
          key = required[_i];
          trans.properties[key].required = true;
        }
      }
      transformed.properties[name] = trans;
    }
    return transformed;
  };

  return SchemaManager;

})();

module.exports = SchemaManager;
