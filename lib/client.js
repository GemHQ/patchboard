// Generated by CoffeeScript 1.3.3
var Client, SchemaManager, Shred, patchboard_api, patchboard_interface;

Shred = require("shred");

patchboard_api = require("./patchboard_api");

patchboard_interface = patchboard_api["interface"];

SchemaManager = require("./schema_manager");

Client = (function() {

  Client.discover = function(service_url, callback) {
    if (service_url.constructor === String) {
      return new Shred().request({
        url: service_url,
        method: "GET",
        headers: {
          "Accept": "application/json"
        },
        on: {
          200: function(response) {
            var client;
            client = new Client(response.content.data);
            return callback(null, client);
          },
          error: function(response) {
            return callback(response);
          }
        }
      });
    } else {
      throw "Expected to receive a String, but got something else";
    }
  };

  function Client(options) {
    var base, constructor, definition, id, key, name, resource_type, schema, value, _base, _ref, _ref1, _ref2, _ref3, _ref4;
    this.shred = new Shred();
    this.schema_manager = (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args), t = typeof result;
      return t == "object" || t == "function" ? result || child : child;
    })(SchemaManager, options.schemas, function(){});
    this.directory = options.directory;
    this.resources = {};
    this["interface"] = {};
    for (key in patchboard_interface) {
      value = patchboard_interface[key];
      this["interface"][key] = value;
    }
    _ref = options["interface"];
    for (key in _ref) {
      value = _ref[key];
      this["interface"][key] = value;
    }
    this.representation_ids = {};
    this.representation_types = {};
    this.resource_constructors = {};
    _ref1 = this.schema_manager.names;
    for (name in _ref1) {
      schema = _ref1[name];
      if (schema.type === "array") {
        constructor = this.array_wrapper(schema);
        this.representation_ids[schema.id] = constructor;
      } else {
        constructor = this.representation_constructor(schema);
        this.representation_ids[schema.id] = constructor;
      }
    }
    _ref2 = this["interface"];
    for (resource_type in _ref2) {
      definition = _ref2[resource_type];
      _ref3 = this.representation_ids;
      for (id in _ref3) {
        constructor = _ref3[id];
        _ref4 = id.split("#"), base = _ref4[0], name = _ref4[1];
        if (name === resource_type) {
          constructor = this.resource_constructor(constructor, resource_type);
          this.representation_ids[id] = constructor;
          this.resource_constructors[resource_type] = constructor;
        }
      }
      (_base = this.resource_constructors)[resource_type] || (_base[resource_type] = this.resource_constructor(null, resource_type));
    }
    this.create_resources(this.directory);
  }

  Client.prototype.create_resources = function(directory) {
    var key, value, _results;
    _results = [];
    for (key in directory) {
      value = directory[key];
      if (this.resource_constructors[key]) {
        _results.push(this.resources[key] = new this.resource_constructors[key]({
          url: value
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Client.prototype.array_wrapper = function(schema) {
    var client, item_type;
    client = this;
    item_type = this.determine_schema_type(schema.items);
    return function(items) {
      var result, value, _i, _len;
      result = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        value = items[_i];
        result.push(client.wrap(item_type, value));
      }
      return result;
    };
  };

  Client.prototype.object_wrapper = function(schema) {
    var client;
    client = this;
    return function(data) {
      var name, prop_def, raw, type, wrapped, _ref;
      _ref = schema.properties;
      for (name in _ref) {
        prop_def = _ref[name];
        raw = data[name];
        type = client.determine_schema_type(prop_def);
        if (type) {
          wrapped = client.wrap(type, raw);
        } else {
          wrapped = raw;
        }
        data[name] = wrapped;
      }
      if (schema.additionalProperties) {
        type = client.determine_schema_type(schema.additionalProperties);
        if (type) {
          for (name in data) {
            raw = data[name];
            if (!(schema.properties && schema.properties[name])) {
              data[name] = client.wrap(type, raw);
            }
          }
        }
      }
      return data;
    };
  };

  Client.prototype.determine_schema_type = function(schema) {
    if (schema.$ref) {
      if (schema.$ref.indexOf("#") === 0) {
        return schema.$ref.slice(1);
      } else {
        return schema.$ref;
      }
    } else if (schema.type) {
      return schema.type;
    }
  };

  Client.prototype.wrap = function(type, data) {
    var wrapper;
    if (wrapper = this.representation_ids[type]) {
      return new wrapper(data);
    } else {
      console.log("no wrapper found for", type);
      return data;
    }
  };

  Client.prototype.resource_constructor = function(constructor, resource_type) {
    var client, interface_def;
    client = this;
    constructor || (constructor = function(properties) {
      this.properties = properties;
      return this.url = this.properties.url;
    });
    constructor.resource_type = resource_type;
    Object.defineProperty(constructor.prototype, "client", {
      value: client,
      enumerable: false
    });
    if (interface_def = this["interface"][resource_type]) {
      this.define_actions(constructor, interface_def.actions);
    }
    return constructor;
  };

  Client.prototype.define_actions = function(constructor, actions) {
    var definition, method, name, _ref, _results;
    constructor.prototype.requests = {};
    _ref = this.resource_methods;
    for (name in _ref) {
      method = _ref[name];
      constructor.prototype[name] = method;
    }
    _results = [];
    for (name in actions) {
      definition = actions[name];
      constructor.prototype.requests[name] = this.request_creator(name, definition);
      _results.push(constructor.prototype[name] = this.register_action(name));
    }
    return _results;
  };

  Client.prototype.representation_constructor = function(schema) {
    var client, constructor;
    client = this;
    constructor = function(properties) {
      this.properties = properties;
    };
    this.define_properties(constructor, schema.properties);
    return constructor;
  };

  Client.prototype.define_properties = function(constructor, properties) {
    var client, name, schema, spec, _results;
    client = this;
    _results = [];
    for (name in properties) {
      schema = properties[name];
      spec = this.property_spec(name, schema);
      _results.push(Object.defineProperty(constructor.prototype, name, spec));
    }
    return _results;
  };

  Client.prototype.property_spec = function(name, property_schema) {
    var client, spec, wrap_function;
    client = this;
    wrap_function = this.create_wrapping_function(property_schema);
    spec = {};
    spec.get = function() {
      var val;
      val = this.properties[name];
      return wrap_function(val);
    };
    if (!property_schema.readonly) {
      spec.set = function(val) {
        return this.properties[name] = val;
      };
    }
    return spec;
  };

  Client.prototype.create_wrapping_function = function(schema) {
    var client, type;
    client = this;
    type = schema.type;
    if (schema.$ref) {
      return function(data) {
        return client.wrap(schema.$ref, data);
      };
    } else if (type === "object") {
      return this.object_wrapper(schema);
    } else if (type === "array") {
      return this.array_wrapper(schema);
    } else {
      return function(data) {
        return data;
      };
    }
  };

  Client.prototype.resource_methods = {
    prepare_request: function(name, options) {
      var prepper;
      prepper = this.requests[name];
      if (prepper) {
        return prepper.call(this, name, options);
      } else {
        throw "No such action defined: " + name;
      }
    },
    request: function(name, options) {
      var request;
      request = this.prepare_request(name, options);
      return this.client.shred.request(request);
    },
    credential: function(type, action) {
      var cap;
      if (type === "Capability") {
        return cap = this.properties.capabilities[action];
      }
    }
  };

  Client.prototype.register_action = function(name) {
    return function(data) {
      return this.request(name, data);
    };
  };

  Client.prototype.request_creator = function(name, definition) {
    var authorization, client, default_headers, method, query, request_media_type, request_type, required_params, response_media_type, response_schema, response_type;
    client = this;
    method = definition.method;
    default_headers = {};
    if (request_type = definition.request_entity) {
      request_media_type = client.schema_manager.names[request_type].mediaType;
      default_headers["Content-Type"] = request_media_type;
    }
    if (response_type = definition.response_entity) {
      response_schema = client.schema_manager.names[response_type];
      response_media_type = response_schema.mediaType;
      default_headers["Accept"] = response_media_type;
    }
    authorization = definition.authorization;
    if (query = definition.query) {
      required_params = query.required;
    }
    return function(name, options) {
      var credential, error, handler, key, request, response, status, value, _ref, _ref1;
      request = {
        url: this.url,
        method: method,
        headers: {},
        content: options.content
      };
      for (key in default_headers) {
        value = default_headers[key];
        request.headers[key] = value;
      }
      if (authorization) {
        credential = this.credential(authorization, name);
        request.headers["Authorization"] = "" + authorization + " " + credential;
      }
      _ref = options.headers;
      for (name in _ref) {
        value = _ref[name];
        request.headers[name] = value;
      }
      if (options.query) {
        request.query = options.query;
      }
      for (key in required_params) {
        value = required_params[key];
        if (!request.query[key]) {
          throw "Missing required query param: " + key;
        }
      }
      request.on = {};
      if (error = options.on.error) {
        request.on.error = error;
        delete options.on.error;
      }
      if (response = options.on.response) {
        request.on.response = response;
        delete options.on.response;
      }
      _ref1 = options.on;
      for (status in _ref1) {
        handler = _ref1[status];
        request.on[status] = function(response) {
          var wrapped;
          if (response.status === definition.status && response_schema) {
            wrapped = client.wrap(response_schema.id, response.content.data);
          }
          return handler(response, wrapped);
        };
      }
      return request;
    };
  };

  return Client;

})();

module.exports = Client;
