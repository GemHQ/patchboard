// Generated by CoffeeScript 1.3.3
var Classifier, Dispatcher, Documenter, PatchboardAPI, Path, SchemaManager, SchemaValidator, Service, URL,
  __slice = [].slice;

URL = require("url");

PatchboardAPI = require("./patchboard_api");

Dispatcher = require("./service/simple_dispatcher");

Documenter = require("./service/documenter");

Classifier = require("./service/classifier");

SchemaManager = require("./schema_manager");

SchemaValidator = require("./schema_validator");

Path = require("./service/path");

Service = (function() {

  function Service(options) {
    var definition, key, path_string, resource_type, value, _ref, _ref1, _ref2, _ref3, _ref4;
    this.service_url = options.service_url || "http://localhost:1337";
    this.normalize_schema(PatchboardAPI.schema);
    this.normalize_schema(options.schema);
    this.schema_manager = new SchemaManager(PatchboardAPI.schema, options.schema);
    this.validator = new SchemaValidator(this.schema_manager);
    this.map = options.map;
    this["interface"] = {};
    _ref = PatchboardAPI["interface"];
    for (key in _ref) {
      value = _ref[key];
      this["interface"][key] = value;
    }
    _ref1 = options["interface"];
    for (key in _ref1) {
      value = _ref1[key];
      this["interface"][key] = value;
    }
    this.directory = {};
    _ref2 = PatchboardAPI.map;
    for (resource_type in _ref2) {
      definition = _ref2[resource_type];
      if (definition.publish) {
        this.directory[resource_type] = "" + this.service_url + definition.paths[0];
      }
    }
    _ref3 = this.map;
    for (resource_type in _ref3) {
      definition = _ref3[resource_type];
      if (definition.publish) {
        this.directory[resource_type] = "" + this.service_url + definition.paths[0];
      }
    }
    this.paths = {};
    _ref4 = this.map;
    for (resource_type in _ref4) {
      definition = _ref4[resource_type];
      path_string = definition.paths[0];
      this.paths[resource_type] = new Path(path_string);
    }
    this.documenter = new Documenter(this.schema_manager.names, this["interface"]);
    this.default_handlers = require("./service/handlers")(this);
    this.description = {
      "interface": this["interface"],
      schema: this.schema_manager.ids,
      schemas: this.schema_manager.schemas,
      directory: this.directory
    };
  }

  Service.prototype.classifier = function() {
    return new Classifier(this);
  };

  Service.prototype.generate_url = function() {
    var args, path, resource_type;
    resource_type = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    path = this.paths[resource_type];
    if (path) {
      return "" + this.service_url + (path.generate.apply(path, args));
    } else {
      throw "Problem generating URL. No such resource: " + resource_type;
    }
  };

  Service.prototype.normalize_schema = function(schema) {
    var definition, name, _ref, _results;
    _ref = schema.properties;
    _results = [];
    for (name in _ref) {
      definition = _ref[name];
      if (definition.id) {
        if (definition.id.indexOf("#") === 0) {
          definition.id = "" + schema.id + definition.id;
        }
      } else {
        definition.id = "" + schema.id + "#" + name;
      }
      if (definition["extends"]) {
        if (definition["extends"].$ref && definition["extends"].$ref.indexOf("#") === 0) {
          definition["extends"].$ref = "" + schema.id + definition["extends"].$ref;
        }
      }
      if (definition.type === "array" && definition.items.$ref.indexOf("#") === 0) {
        _results.push(definition.items.$ref = "" + schema.id + definition.items.$ref);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Service.prototype.simple_dispatcher = function(app_handlers) {
    var actions, dispatcher, handler, handlers, name, resource, _ref;
    handlers = {};
    _ref = this.default_handlers;
    for (resource in _ref) {
      actions = _ref[resource];
      handlers[resource] || (handlers[resource] = {});
      for (name in actions) {
        handler = actions[name];
        handlers[resource][name] = handler;
      }
    }
    for (resource in app_handlers) {
      actions = app_handlers[resource];
      handlers[resource] || (handlers[resource] = {});
      for (name in actions) {
        handler = actions[name];
        handlers[resource][name] = handler;
      }
    }
    dispatcher = new Dispatcher(this, handlers);
    return dispatcher.create_handler();
  };

  Service.prototype.augment_request = function(request) {
    var key, part, query, query_parts, url, value, _i, _len, _ref;
    url = URL.parse(request.url);
    request.path = url.pathname;
    if (url.query) {
      query_parts = url.query.split("&");
      query = {};
      for (_i = 0, _len = query_parts.length; _i < _len; _i++) {
        part = query_parts[_i];
        _ref = part.split("="), key = _ref[0], value = _ref[1];
        query[key] = value;
      }
    } else {
      query = {};
    }
    return request.query = query;
  };

  Service.prototype.documentation = function() {
    return "" + (this.documenter.document_interface()) + "\n\n" + (this.schema_manager.document());
  };

  return Service;

})();

module.exports = Service;
