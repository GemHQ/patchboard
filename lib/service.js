// Generated by CoffeeScript 1.3.3
var Dispatcher, Documenter, PatchboardAPI, Service, URL;

URL = require("url");

PatchboardAPI = require("./patchboard_api");

Dispatcher = require("./service/simple_dispatcher");

Documenter = require("./service/documenter");

Service = (function() {

  function Service(options) {
    var definition, key, resource_type, value, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    this.base_url = options.url || "http://localhost:1337";
    this.schema = {
      properties: {}
    };
    this["interface"] = {};
    this.directory = {};
    this.default_handlers = require("./service/handlers")(this);
    _ref = PatchboardAPI.schema.properties;
    for (key in _ref) {
      value = _ref[key];
      this.schema.properties[key] = value;
    }
    _ref1 = options.schema.properties;
    for (key in _ref1) {
      value = _ref1[key];
      this.schema.properties[key] = value;
    }
    _ref2 = PatchboardAPI["interface"];
    for (key in _ref2) {
      value = _ref2[key];
      this["interface"][key] = value;
    }
    _ref3 = options["interface"];
    for (key in _ref3) {
      value = _ref3[key];
      this["interface"][key] = value;
    }
    _ref4 = PatchboardAPI.map;
    for (resource_type in _ref4) {
      definition = _ref4[resource_type];
      if (definition.publish) {
        this.directory[resource_type] = "" + this.base_url + definition.paths[0];
      }
    }
    _ref5 = options.map;
    for (resource_type in _ref5) {
      definition = _ref5[resource_type];
      if (definition.publish) {
        this.directory[resource_type] = "" + this.base_url + definition.paths[0];
      }
    }
    this["interface"] = options["interface"];
    this.map = options.map;
    this.documenter = new Documenter(this.schema, this["interface"]);
    this.description = {
      "interface": this["interface"],
      schema: this.schema,
      directory: this.directory
    };
  }

  Service.prototype.simple_dispatcher = function(app_handlers) {
    var actions, dispatcher, handler, handlers, name, resource, _ref;
    handlers = {};
    _ref = this.default_handlers;
    for (resource in _ref) {
      actions = _ref[resource];
      handlers[resource] || (handlers[resource] = {});
      for (name in actions) {
        handler = actions[name];
        handlers[resource][name] = handler;
      }
    }
    for (resource in app_handlers) {
      actions = app_handlers[resource];
      handlers[resource] || (handlers[resource] = {});
      for (name in actions) {
        handler = actions[name];
        handlers[resource][name] = handler;
      }
    }
    dispatcher = new Dispatcher(this, handlers);
    return dispatcher.create_handler();
  };

  Service.prototype.improve_request = function(request) {
    var key, part, query, query_parts, url, value, _i, _len, _ref;
    url = URL.parse(request.url);
    request.path = url.pathname;
    if (url.query) {
      query_parts = url.query.split("&");
      query = {};
      for (_i = 0, _len = query_parts.length; _i < _len; _i++) {
        part = query_parts[_i];
        _ref = part.split("="), key = _ref[0], value = _ref[1];
        query[key] = value;
      }
    } else {
      query = {};
    }
    return request.query = query;
  };

  Service.prototype.documentation = function() {
    return "" + (this.documenter.document_interface()) + "\n\n" + (this.documenter.document_schema());
  };

  return Service;

})();

module.exports = Service;
